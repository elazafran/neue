{
  "version": 3,
  "file": "/pipeline/build/dist/validation.js",
  "sources": [
    "../bower_components/almond/almond.js",
    "events.js",
    "validation.js"
  ],
  "names": [],
  "mappingsxaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACr
  "sourcesContent": [
    "/**\n * @license almond 0.2.9 Copyright (c) 2011-2014, The Dojo Foundation All Rights Reserved.\n * Available via the MIT or new BSD license.\n * see: http://github.com/jrburke/almond for details\n */\n//Going sloppy to avoid 'use strict' string cost, but strict practices should\n//be followed.\n/*jslint sloppy: true */\n/*global setTimeout: false */\n\nvar requirejs, require, define;\n(function (undef) {\n    var main, req, makeMap, handlers,\n        defined = {},\n        waiting = {},\n        config = {},\n        defining = {},\n        hasOwn = Object.prototype.hasOwnProperty,\n        aps = [].slice,\n        jsSuffixRegExp = /\\.js$/;\n\n    function hasProp(obj, prop) {\n        return hasOwn.call(obj, prop);\n    }\n\n    /**\n     * Given a relative module name, like ./something, normalize it to\n     * a real name that can be mapped to a path.\n     * @param {String} name the relative name\n     * @param {String} baseName a real name that the name arg is relative\n     * to.\n     * @returns {String} normalized name\n     */\n    function normalize(name, baseName) {\n        var nameParts, nameSegment, mapValue, foundMap, lastIndex,\n            foundI, foundStarMap, starI, i, j, part,\n            baseParts = baseName && baseName.split(\"/\"),\n            map = config.map,\n            starMap = (map && map['*']) || {};\n\n        //Adjust any relative paths.\n        if (name && name.charAt(0) === \".\") {\n            //If have a base name, try to normalize against it,\n            //otherwise, assume it is a top-level require that will\n            //be relative to baseUrl in the end.\n            if (baseName) {\n                //Convert baseName to array, and lop off the last part,\n                //so that . matches that \"directory\" and not name of the baseName's\n                //module. For instance, baseName of \"one/two/three\", maps to\n                //\"one/two/three.js\", but we want the directory, \"one/two\" for\n                //this normalization.\n                baseParts = baseParts.slice(0, baseParts.length - 1);\n                name = name.split('/');\n                lastIndex = name.length - 1;\n\n                // Node .js allowance:\n                if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {\n                    name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');\n                }\n\n                name = baseParts.concat(name);\n\n                //start trimDots\n                for (i = 0; i < name.length; i += 1) {\n                    part = name[i];\n                    if (part === \".\") {\n                        name.splice(i, 1);\n                        i -= 1;\n                    } else if (part === \"..\") {\n                        if (i === 1 && (name[2] === '..' || name[0] === '..')) {\n                            //End of the line. Keep at least one non-dot\n                            //path segment at the front so it can be mapped\n                            //correctly to disk. Otherwise, there is likely\n                            //no path mapping for a path starting with '..'.\n                            //This can still fail, but catches the most reasonable\n                            //uses of ..\n                            break;\n                        } else if (i > 0) {\n                            name.splice(i - 1, 2);\n                            i -= 2;\n                        }\n                    }\n                }\n                //end trimDots\n\n                name = name.join(\"/\");\n            } else if (name.indexOf('./') === 0) {\n                // No baseName, so this is ID is resolved relative\n                // to baseUrl, pull off the leading dot.\n                name = name.substring(2);\n            }\n        }\n\n        //Apply map config if available.\n        if ((baseParts || starMap) && map) {\n            nameParts = name.split('/');\n\n            for (i = nameParts.length; i > 0; i -= 1) {\n                nameSegment = nameParts.slice(0, i).join(\"/\");\n\n                if (baseParts) {\n                    //Find the longest baseName segment match in the config.\n                    //So, do joins on the biggest to smallest lengths of baseParts.\n                    for (j = baseParts.length; j > 0; j -= 1) {\n                        mapValue = map[baseParts.slice(0, j).join('/')];\n\n                        //baseName segment has  config, find if it has one for\n                        //this name.\n                        if (mapValue) {\n                            mapValue = mapValue[nameSegment];\n                            if (mapValue) {\n                                //Match, update name to the new value.\n                                foundMap = mapValue;\n                                foundI = i;\n                                break;\n                            }\n                        }\n                    }\n                }\n\n                if (foundMap) {\n                    break;\n                }\n\n                //Check for a star map match, but just hold on to it,\n                //if there is a shorter segment match later in a matching\n                //config, then favor over this star map.\n                if (!foundStarMap && starMap && starMap[nameSegment]) {\n                    foundStarMap = starMap[nameSegment];\n                    starI = i;\n                }\n            }\n\n            if (!foundMap && foundStarMap) {\n                foundMap = foundStarMap;\n                foundI = starI;\n            }\n\n            if (foundMap) {\n                nameParts.splice(0, foundI, foundMap);\n                name = nameParts.join('/');\n            }\n        }\n\n        return name;\n    }\n\n    function makeRequire(relName, forceSync) {\n        return function () {\n            //A version of a require function that passes a moduleName\n            //value for items that may need to\n            //look up paths relative to the moduleName\n            return req.apply(undef, aps.call(arguments, 0).concat([relName, forceSync]));\n        };\n    }\n\n    function makeNormalize(relName) {\n        return function (name) {\n            return normalize(name, relName);\n        };\n    }\n\n    function makeLoad(depName) {\n        return function (value) {\n            defined[depName] = value;\n        };\n    }\n\n    function callDep(name) {\n        if (hasProp(waiting, name)) {\n            var args = waiting[name];\n            delete waiting[name];\n            defining[name] = true;\n            main.apply(undef, args);\n        }\n\n        if (!hasProp(defined, name) && !hasProp(defining, name)) {\n            throw new Error('No ' + name);\n        }\n        return defined[name];\n    }\n\n    //Turns a plugin!resource to [plugin, resource]\n    //with the plugin being undefined if the name\n    //did not have a plugin prefix.\n    function splitPrefix(name) {\n        var prefix,\n            index = name ? name.indexOf('!') : -1;\n        if (index > -1) {\n            prefix = name.substring(0, index);\n            name = name.substring(index + 1, name.length);\n        }\n        return [prefix, name];\n    }\n\n    /**\n     * Makes a name map, normalizing the name, and using a plugin\n     * for normalization if necessary. Grabs a ref to plugin\n     * too, as an optimization.\n     */\n    makeMap = function (name, relName) {\n        var plugin,\n            parts = splitPrefix(name),\n            prefix = parts[0];\n\n        name = parts[1];\n\n        if (prefix) {\n            prefix = normalize(prefix, relName);\n            plugin = callDep(prefix);\n        }\n\n        //Normalize according\n        if (prefix) {\n            if (plugin && plugin.normalize) {\n                name = plugin.normalize(name, makeNormalize(relName));\n            } else {\n                name = normalize(name, relName);\n            }\n        } else {\n            name = normalize(name, relName);\n            parts = splitPrefix(name);\n            prefix = parts[0];\n            name = parts[1];\n            if (prefix) {\n                plugin = callDep(prefix);\n            }\n        }\n\n        //Using ridiculous property names for space reasons\n        return {\n            f: prefix ? prefix + '!' + name : name, //fullName\n            n: name,\n            pr: prefix,\n            p: plugin\n        };\n    };\n\n    function makeConfig(name) {\n        return function () {\n            return (config && config.config && config.config[name]) || {};\n        };\n    }\n\n    handlers = {\n        require: function (name) {\n            return makeRequire(name);\n        },\n        exports: function (name) {\n            var e = defined[name];\n            if (typeof e !== 'undefined') {\n                return e;\n            } else {\n                return (defined[name] = {});\n            }\n        },\n        module: function (name) {\n            return {\n                id: name,\n                uri: '',\n                exports: defined[name],\n                config: makeConfig(name)\n            };\n        }\n    };\n\n    main = function (name, deps, callback, relName) {\n        var cjsModule, depName, ret, map, i,\n            args = [],\n            callbackType = typeof callback,\n            usingExports;\n\n        //Use name if no relName\n        relName = relName || name;\n\n        //Call the callback to define the module, if necessary.\n        if (callbackType === 'undefined' || callbackType === 'function') {\n            //Pull out the defined dependencies and pass the ordered\n            //values to the callback.\n            //Default to [require, exports, module] if no deps\n            deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;\n            for (i = 0; i < deps.length; i += 1) {\n                map = makeMap(deps[i], relName);\n                depName = map.f;\n\n                //Fast path CommonJS standard dependencies.\n                if (depName === \"require\") {\n                    args[i] = handlers.require(name);\n                } else if (depName === \"exports\") {\n                    //CommonJS module spec 1.1\n                    args[i] = handlers.exports(name);\n                    usingExports = true;\n                } else if (depName === \"module\") {\n                    //CommonJS module spec 1.1\n                    cjsModule = args[i] = handlers.module(name);\n                } else if (hasProp(defined, depName) ||\n                           hasProp(waiting, depName) ||\n                           hasProp(defining, depName)) {\n                    args[i] = callDep(depName);\n                } else if (map.p) {\n                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});\n                    args[i] = defined[depName];\n                } else {\n                    throw new Error(name + ' missing ' + depName);\n                }\n            }\n\n            ret = callback ? callback.apply(defined[name], args) : undefined;\n\n            if (name) {\n                //If setting exports via \"module\" is in play,\n                //favor that over return value and exports. After that,\n                //favor a non-undefined return value over exports use.\n                if (cjsModule && cjsModule.exports !== undef &&\n                        cjsModule.exports !== defined[name]) {\n                    defined[name] = cjsModule.exports;\n                } else if (ret !== undef || !usingExports) {\n                    //Use the return value from the function.\n                    defined[name] = ret;\n                }\n            }\n        } else if (name) {\n            //May just be an object definition for the module. Only\n            //worry about defining if have a module name.\n            defined[name] = callback;\n        }\n    };\n\n    requirejs = require = req = function (deps, callback, relName, forceSync, alt) {\n        if (typeof deps === \"string\") {\n            if (handlers[deps]) {\n                //callback in this case is really relName\n                return handlers[deps](callback);\n            }\n            //Just return the module wanted. In this scenario, the\n            //deps arg is the module name, and second arg (if passed)\n            //is just the relName.\n            //Normalize module name, if it contains . or ..\n            return callDep(makeMap(deps, callback).f);\n        } else if (!deps.splice) {\n            //deps is a config object, not an array.\n            config = deps;\n            if (config.deps) {\n                req(config.deps, config.callback);\n            }\n            if (!callback) {\n                return;\n            }\n\n            if (callback.splice) {\n                //callback is an array, which means it is a dependency list.\n                //Adjust args if there are dependencies\n                deps = callback;\n                callback = relName;\n                relName = null;\n            } else {\n                deps = undef;\n            }\n        }\n\n        //Support require(['a'])\n        callback = callback || function () {};\n\n        //If relName is a function, it is an errback handler,\n        //so remove it.\n        if (typeof relName === 'function') {\n            relName = forceSync;\n            forceSync = alt;\n        }\n\n        //Simulate async callback;\n        if (forceSync) {\n            main(undef, deps, callback, relName);\n        } else {\n            //Using a non-zero value because of concern for what old browsers\n            //do, and latest browsers \"upgrade\" to 4 if lower value is used:\n            //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:\n            //If want a value immediately, use require('id') instead -- something\n            //that works in almond on the global level, but not guaranteed and\n            //unlikely to work in other AMD implementations.\n            setTimeout(function () {\n                main(undef, deps, callback, relName);\n            }, 4);\n        }\n\n        return req;\n    };\n\n    /**\n     * Just drops the config on the floor, but returns req in case\n     * the config return value is used.\n     */\n    req.config = function (cfg) {\n        return req(cfg);\n    };\n\n    /**\n     * Expose module registry for debugging and tooling\n     */\n    requirejs._defined = defined;\n\n    define = function (name, deps, callback) {\n\n        //This module may not have dependencies\n        if (!deps.splice) {\n            //deps is not an array, so probably means\n            //an object literal or factory function for\n            //the value. Adjust args.\n            callback = deps;\n            deps = [];\n        }\n\n        if (!hasProp(defined, name) && !hasProp(waiting, name)) {\n            waiting[name] = [name, deps, callback];\n        }\n    };\n\n    define.amd = {\n        jQuery: true\n    };\n}());\n\ndefine(\"../bower_components/almond/almond\", function(){});\n\n",
    "/**\n * Pub/Sub events: Allows modules to communicate via publishing\n * and subscribing to events.\n *\n * Based on Addy Osmani's Pubsubz, licensed under the GPL.\n * https://github.com/addyosmani/pubsubz\n * http://jsfiddle.net/LxPrq/\n */\n\ndefine('events',[],function() {\n  \"use strict\";\n\n  var topics = {};\n  var subUid = -1;\n\n  var publish = function(topic, args) {\n    if (!topics[topic]) {\n      return false;\n    }\n\n    setTimeout(function() {\n      var subscribers = topics[topic],\n      len = subscribers ? subscribers.length : 0;\n\n      while(len--) {\n        subscribers[len].func(topic, args);\n      }\n    }, 0);\n\n    return true;\n  };\n\n  var subscribe = function(topic, func) {\n    if (!topics[topic]) {\n      topics[topic] = [];\n    }\n\n    var token = (++subUid).toString();\n    topics[topic].push({\n      token: token,\n      func: func\n    });\n\n    return token;\n  };\n\n  var unsubscribe = function(token) {\n    for (var m in topics) {\n      if (topics[m]) {\n        for (var i = 0, j = topics[m].length; i < j; i++) {\n          if (topics[m][i].token === token) {\n            topics[m].splice(i, 1);\n            return token;\n          }\n        }\n      }\n    }\n\n    return false;\n  };\n\n  // Export public API\n  return {\n    publish: publish,\n    subscribe: subscribe,\n    unsubscribe: unsubscribe\n  };\n});\n\n",
    "/**\n * Client-side form validation logic. Form element is validated based\n * on `data-validate` attribute, and validation output is placed in\n * corresponding `<label>`.\n *\n * Validations can be added later by extending `NEUE.Validation.Validations`.\n * Validators can be added later by extending `NEUE.Validation.Validators`.\n *\n * finished validating with a boolean `success` and a plain-text `message`\n * value. (Alternatively, a `suggestion` value can be passed which will\n * prompt the user \"Did you mean {suggestion}?\".\n *\n * ## Usage Notes:\n * - Input field must have `data-validate` attribute.\n * - If adding input fields to the DOM after load, run `prepareFields`\n */\n\ndefine('validation',['require','./events'],function(require) {\n  \"use strict\";\n\n  var $ = window.jQuery;\n  var Events = require(\"./events\");\n  var validations = [];\n\n  /**\n   * Prepares form label DOM to display validation messages & register event handler\n   * @param {jQuery} $fields Fields to register validation handlers to.\n   */\n  var prepareFields = function($fields) {\n    $fields.each(function() {\n      var $field = $(this);\n\n      prepareLabel( $(\"label[for='\" + $field.attr(\"id\") + \"']\") );\n\n      $field.on(\"blur\", function(event) {\n        event.preventDefault();\n        validateField( $field );\n      });\n    });\n  };\n\n  /**\n   * Prepare field label DOM to display validation messages.\n   * @param {jQuery} $label Label element to prepare.\n   */\n  var prepareLabel = function($label) {\n    // Check to make sure we haven't already prepared this before\n    if($label.find(\".validation\").length === 0) {\n      var $innerLabel = $(\"<div class='validation'></div>\");\n      $innerLabel.append(\"<div class='validation__label'>\" + $label.html() + \"</div>\");\n      $innerLabel.append(\"<div class='validation__message'></div>\");\n\n      $label.html($innerLabel);\n    }\n  };\n\n  /**\n   * Trigger a validation on a form element.\n   * @param {jQuery}   $field                            Form element to be validated.\n   * @param {jQuery}   [force = false]                   Force validation (even on empty fields).\n   * @param {function} [callback=showValidationMessage]  Callback function that receives validation result\n   */\n  var validateField = function($field, force, callback) {\n    // Default arguments\n    force = typeof force !== \"undefined\" ? force : false;\n    callback = typeof callback !== \"undefined\" ? callback : function($field, result) {\n      showValidationMessage($field, result);\n    };\n\n    var validation = $field.data(\"validate\");\n\n    // Trigger any other linked validation\n    var validationTrigger = $field.data(\"validate-trigger\");\n    if(validationTrigger) {\n      validateField( $(validationTrigger) );\n    }\n\n\n    // Don't validate if validation doesn't exist\n    if(!validations[validation]) {\n      console.error(\"A validation with the name \"+ validation + \" has not been registered.\");\n      return;\n    }\n\n    // For <input>, <select>, and <textarea> tags we provide\n    // the field's value as a string\n    if( isFormField($field) ) {\n      // Get field info\n      var fieldValue = $field.val();\n\n      // Finally, let's not validate blank fields unless forced to\n      if(force || fieldValue !== \"\") {\n        if(validation === \"match\") {\n          var matchFieldValue = $($field.data(\"validate-match\")).val();\n          validations[validation].fn(fieldValue, matchFieldValue, function(result) {\n            callback($field, result);\n          });\n        } else {\n          validations[validation].fn(fieldValue, function(result) {\n            callback($field, result);\n          });\n        }\n      }\n    } else {\n      // For all other tags, we pass the element directly\n      if(validation === \"match\") {\n        var $matchField = $($field.data(\"validate-match\"));\n        validations[validation].fn($field, $matchField, function(result) {\n          callback($field, result);\n        });\n      } else {\n        validations[validation].fn($field, function(result) {\n          callback($field, result);\n        });\n      }\n    }\n  };\n\n  /**\n   * Register a new validation.\n   *\n   * @param {String}    name              The name function will be referenced by in `data-validate` attribute.\n   * @param {Object}    validation        Collection of validation rules to apply\n   * @param {Function}  [validation.fn]   Custom validation\n   */\n  var registerValidation = function(name, validation) {\n    if(validations[name]) {\n      throw \"A validation function with that name has already been registered\";\n    }\n\n    validations[name] = validation;\n  };\n\n  /**\n   * @DEPRECATED: Will be removed in a future version in favor of `registerValidation`.\n   */\n  var registerValidationFunction = function(name, func) {\n    var v = {\n      fn: func\n    };\n\n    registerValidation(name, v);\n  };\n\n  /**\n   * Show validation message in markup.\n   *\n   * @param {jQuery} $field              Field to display validation message for.\n   * @param {Object} result              Object containing `success` and either `message` or `suggestion`\n   */\n  var showValidationMessage = function($field, result) {\n    var $fieldLabel = $(\"label[for='\" + $field.attr(\"id\") + \"']\");\n    var $fieldValidation = $fieldLabel.find(\".validation\");\n    var $fieldMessage = $fieldValidation.find(\".validation__message\");\n    var fieldLabelHeight = $fieldLabel.height();\n    var fieldMessageHeight;\n\n    $field.removeClass(\"has-success has-error has-warning shake\");\n    $fieldMessage.removeClass(\"has-success has-error has-warning\");\n\n    // Highlight/animate field\n    if(result.success === true) {\n      $field.addClass(\"has-success\");\n      $fieldMessage.addClass(\"has-success\");\n    } else {\n      $field.addClass(\"has-error\");\n      $fieldMessage.addClass(\"has-error\");\n\n      if( isFormField($field) ) {\n        $field.addClass(\"shake\");\n      }\n\n      Events.publish(\"Validation:InlineError\", $fieldLabel.attr(\"for\"));\n    }\n\n    // Show validation message\n    if(result.message) {\n      $fieldMessage.text(result.message);\n    }\n\n    if(result.suggestion) {\n      $fieldMessage.html(\"Did you mean \" + result.suggestion.full + \"? <a href='#' data-suggestion='\" + result.suggestion.full + \"'class='js-mailcheck-fix'>Fix it!</a>\");\n      Events.publish(\"Validation:Suggestion\", result.suggestion.domain);\n    }\n\n    fieldMessageHeight = $fieldMessage.height();\n\n    // Set label height if it needs to be multiline.\n    if(fieldMessageHeight > fieldLabelHeight) {\n      $fieldLabel.css(\"height\", fieldMessageHeight + \"px\");\n    } else {\n      // Clear previous multiline height if no longer needed.\n      $fieldLabel.css(\"height\", \"\");\n    }\n\n    // Animate in the validation message\n    $fieldValidation.addClass(\"is-showing-message\");\n\n    $(\".js-mailcheck-fix\").on(\"click\", function(e) {\n      e.preventDefault();\n\n      var $field = $(\"#\" + $(this).closest(\"label\").attr(\"for\"));\n      $field.val($(this).data(\"suggestion\"));\n      $field.trigger(\"blur\");\n\n      // If Google Analytics is set up, we fire an event to\n      // mark that a suggestion has been made\n      Events.publish(\"Validation:SuggestionUsed\", $(this).text() );\n    });\n\n    $field.on(\"focus\", function() {\n      $field.removeClass(\"has-warning has-error has-success shake\");\n      $fieldValidation.removeClass(\"is-showing-message\");\n      $fieldLabel.css(\"height\", \"\");\n    });\n\n    return result.success;\n  };\n\n\n  /**\n   * Disable form submission.\n   * @param {jQuery} $form Form to disable submission for.\n   */\n  var disableFormSubmit = function($form) {\n    // Prevent double-submissions\n    var $submitButton = $form.find(\":submit\");\n\n    // Disable that guy\n    $submitButton.attr(\"disabled\", true);\n    $submitButton.addClass(\"is-loading\");\n  };\n\n\n  /**\n   * Re-enable form submission.\n   * @param {jQuery} $form Form to enable submission for.\n   */\n  var enableFormSubmit = function($form) {\n    var $submitButton = $form.find(\":submit\");\n    $submitButton.attr(\"disabled\", false);\n    $submitButton.removeClass(\"is-loading is-disabled\");\n  };\n\n  /**\n   * Returns whether element is <input>, <select>, or <textarea>.\n   * @param {jQuery} $el  Element to check type of.\n   * @return {boolean}\n   */\n  var isFormField = function($el) {\n    var tag = $el.prop(\"tagName\");\n    return ( tag === \"INPUT\" || tag === \"SELECT\" || tag === \"TEXTAREA\" );\n  };\n\n  /**\n   * Validate form on submit.\n   */\n  $(\"body\").on(\"submit\", \"form\", function(event, isValidated) {\n    var $form = $(this);\n    var $validationFields = $form.find(\"[data-validate]\");\n\n    // Disable form submission to prevent double-clicks.\n    disableFormSubmit($form);\n\n    // We want to validate all [data-validate] field that are either required, or have user input.\n    $validationFields = $validationFields.map(function() {\n      var $this = $(this);\n      if(typeof $this.attr(\"data-validate-required\") !== \"undefined\" || $this.val() !== \"\") {\n        return $this;\n      }\n    });\n\n    // If no fields should be validated, submit!\n    if($validationFields.length === 0) {\n      return true;\n    }\n\n    if(isValidated === true) {\n      // completed a previous runthrough & validated;\n      // we're ready to submit the form\n      return true;\n    } else {\n      event.preventDefault();\n\n      var validatedFields = 0;\n      var validatedResults = 0;\n      var scrolledToError = false;\n\n      $validationFields.each(function() {\n        validateField($(this), true, function($field, result) {\n          validatedFields++;\n          showValidationMessage($field, result);\n\n          if(result.success) {\n            validatedResults++;\n          }\n\n          // If this is the first error in the form, scroll to it.\n          if(!scrolledToError && result.success === false) {\n            scrolledToError = true;\n            $(\"html,body\").animate({scrollTop: $field.offset().top - 32}, 200);\n          }\n\n          // Once we're done validating all fields, check status of form\n          if(validatedFields === $validationFields.length) {\n            if(validatedResults === $validationFields.length) {\n              // we've validated all that can be validated\n              Events.publish(\"Validation:Submitted\", $(this).attr(\"id\") );\n              $form.trigger(\"submit\", true);\n            } else {\n              Events.publish(\"Validation:SubmitError\", $(this).attr(\"id\") );\n              enableFormSubmit($form);\n            }\n          }\n        });\n      });\n\n      return false; // don't submit form, wait for callback with `true` parameter\n    }\n  });\n\n  // Register the \"match\" validation.\n  registerValidationFunction(\"match\", function(string, secondString, done) {\n    if(string === secondString && string !== \"\") {\n      return done({\n        success: true,\n        message: \"Looks good!\"\n      });\n    } else {\n      return done({\n        success: false,\n        message: \"That doesn't match.\"\n      });\n    }\n  });\n\n  $(function() {\n    // Prepare the labels on any `[data-validate]` fields in the DOM at load\n    prepareFields( $(\"body\").find(\"[data-validate]\") );\n  });\n\n  // Attach to namespaced window object\n  window.DS = window.DS || {};\n  window.DS.Validation = {\n    prepareFields: prepareFields,\n    registerValidation: registerValidation,\n    registerValidationFunction: registerValidationFunction,\n    validateField: validateField,\n    showValidationMessage: showValidationMessage,\n    Validations: validations,\n    Events: Events\n  };\n\n  return window.DS.Validation;\n});\n\n"
  ]
}